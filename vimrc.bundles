" Auto Install Plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload
  silent !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" }}}


call plug#begin('~/.vim/bundle')

" Appearance {{{
Plug 'w0ng/vim-hybrid'
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'NLKNguyen/papercolor-theme'
Plug 'croaky/vim-colors-github'
Plug 'junegunn/seoul256.vim'
" Plug 'saaguero/vim-github-colorscheme'

Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesEnable'  }
  autocmd! User indentLine doautocmd indentLine Syntax
  let g:indentLine_enabled = 0
" Plug 'junegunn/indentLine'
"     let g:indentLine_char = '┊'
"     let g:indentLine_color_term = 239

" Plug 'vim-airline/vim-airline-themes'
" Plug 'bling/vim-airline'
"    let g:airline_theme='light'
"    let g:airline#extensions#branch#enabled = 1
"    let g:airline#extensions#branch#empty_message = ''
"    let g:airline#extensions#syntastic#enabled = 1

"    " modify airline symbols
"    if !exists('g:airline_symbols')
"        let g:airline_symbols = {}
"    endif
"    let g:airline_left_sep = '»'
"    let g:airline_left_sep = '▶'
"    let g:airline_right_sep = '«'
"    " let g:airline_right_sep = '◀'
"    let g:airline_symbols.linenr = '␊'
"    let g:airline_symbols.linenr = '␤'
"    let g:airline_symbols.linenr = '¶'
"    let g:airline_symbols.branch = '⎇'
"    let g:airline_symbols.paste = 'ρ'
"    let g:airline_symbols.paste = 'Þ'
"    let g:airline_symbols.paste = '∥'
"    let g:airline_symbols.whitespace = 'Ξ'
"    " let g:airline_symbols.whitespace = '☯'
"    " shorter mode names
"    let g:airline_mode_map = {
"        \ '__' : '-',
"        \ 'n'  : 'N',
"        \ 'i'  : 'I',
"        \ 'R'  : 'R',
"        \ 'c'  : 'C',
"        \ 'v'  : 'V',
"        \ 'V'  : 'V',
"        \ '' : 'V',
"        \ 's'  : 'S',
"        \ 'S'  : 'S',
"        \ '' : 'S',
"        \ }
"    " control which sections get truncated and at what width. >
"    let g:airline#extensions#default#section_truncate_width = {
"        \   'b': 79,
"        \   'x': 60,
"        \   'y': 88,
"        \   'z': 45,
"        \ }
"    " disable summary of changed hunks under source control.
"    let g:airline#extensions#hunks#enabled = 0
" }}}

" Core {{{
if has('gui_running')
  Plug 'ctrlpvim/ctrlp.vim'
      let g:ctrlp_match_window = 'bottom,order:bbt,min:20,max:36'
      let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .DS_Store
        \ --ignore vendor/bundle
        \ --ignore bower_components
        \ --ignore node_modules
        \ --ignore "**/*.pyc"
        \ -g ""'
      let g:ctrlp_working_path_mode = 0
      let g:ctrlp_custom_ignore = {
          \ 'dir':  '\v[\/](\.git|\.hg|\.svn|bower_components|node_modules|vendor\/bundle)$',
          \ 'file': '\.pyc$\|\.pyo$',
          \ }
      let g:ctrlp_open_multiple_files = '1jr'
      let g:ctrlp_max_files = 0
      let g:ctrlp_lazy_update = 50
      let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

Plug 'felikz/ctrlp-py-matcher'
Plug 'mattn/ctrlp-register'
Plug 'mattn/ctrlp-mark'
Plug 'tacahiroy/ctrlp-funky'
    let g:ctrlp_funky_syntax_highlight = 1

Plug 'bufkill.vim'
Plug 'matchit.zip'
Plug 'tComment'
Plug 'jiangmiao/auto-pairs'
Plug 'gabesoft/vim-ags'
    nnoremap <C-y> :Ags <cword>

Plug 'kristijanhusak/vim-multiple-cursors'
    " Disable NeoComplete once start selecting multiple cursors
    function! Multiple_cursors_before()
        if exists(':NeoCompleteLock') == 2
            exe 'NeoCompleteLock'
        endif
    endfunction
    " Re-enable NeoComplete when the multiple selection is canceled
    function! Multiple_cursors_after()
        if exists(':NeoCompleteUnlock') == 2
            exe 'NeoCompleteUnlock'
        endif
    endfunction

Plug 'junegunn/vim-easy-align'
	" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
	xmap <CR>      <Plug>(EasyAlign)
Plug 'junegunn/vim-pseudocl'
" Improved /-search for Vim
Plug 'junegunn/vim-oblique'
" Find-N-Replace in Vim with live preview
Plug 'junegunn/vim-fnr'
" Peekaboo extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'

Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'majutsushi/tagbar'
  let g:tagbar_sort = 0

Plug 'Lokaltog/vim-easymotion'
    " easymotion prefix
    map ,      <Plug>(easymotion-prefix)
    " not case censitive
    let g:EasyMotion_smartcase = 1

" gof opens the file manager at the directory of the file you are currently editing in Vim.
" got opens the terminal at the directory of the file you are currently editing in Vim.
Plug 'justinmk/vim-gtfo'

Plug 'scrooloose/nerdtree'
    " Make it colourful and pretty
    let NERDChristmasTree = 1
    " Size of the NERD tree
    let NERDTreeWinSize = 40
    " Disable 'bookmarks' and 'help'
    let NERDTreeMinimalUI = 1
    " Show hidden files
    let NERDTreeShowHidden = 1
    " Highlight the selected entry in the tree
    let NERDTreeHighlightCursorline = 1
    " Use a single click to fold/unfold directories
    let NERDTreeMouseMode = 2
    " Don't display these kinds of files in NERDTree
    let NERDTreeIgnore = [
        \ '\~$', '\.pyc$', '\.pyo$', '\.class$', '\.aps',
        \ '\.git', '\.hg', '\.svn', '\.sass-cache',
        \ '\.coverage$', '\.tmp$', '\.gitkeep$',
        \ '\.vcxproj', '\.bundle', '\.DS_Store$', '\tags$']
Plug 'jistr/vim-nerdtree-tabs'
    map <F3> <Plug>NERDTreeTabsToggle<CR>
    nnoremap <C-u> :NERDTreeFind<CR>
    " Do not open NERDTree on startup
    let g:nerdtree_tabs_open_on_gui_startup = 0

" Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-projectionist'

" Tmux
" Plug 'tpope/vim-tbone'
" Plug 'tpope/vim-dispatch'

" }}}

" Programming {{{
Plug 'ervandew/supertab'
Plug 'rizzatti/dash.vim'

Plug 'scrooloose/syntastic'
    " let g:syntastic_check_on_open=1
    " let g:syntastic_enable_signs=1
    let g:syntastic_enable_highlighting = 0
    let g:syntastic_phpcs_conf = "--tab-width=4 --standard=PSR2"

    " manual syntastic check
    " nnoremap <silent> <F7> :SyntasticCheck<CR>
    " fancy symbols
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '‽'
    let g:syntastic_style_error_symbol = '❄'
    let g:syntastic_style_warning_symbol = '❖'
    " error window will be automatically closed
    " let g:syntastic_auto_loc_list = 1
    " populate syntastic errors in location list
    " let g:syntastic_always_populate_loc_list = 1
    " height of the location lists that syntastic opens
    let g:syntastic_loc_list_height = 5
    " automatic syntax checking
    let g:syntastic_mode_map = {
        \ 'mode': 'active',
        \ 'active_filetypes': ['php', 'javascript', 'ruby', 'coffee'],
        \ 'passive_filetypes': ['html', 'css', 'scss'] }

Plug 'zerowidth/vim-copy-as-rtf', { 'on': 'CopyRTF' }
Plug 'AndrewRadev/splitjoin.vim'
Plug 'zhuochun/vim-dicts'
Plug 'Shougo/neosnippet-snippets'
Plug 'Shougo/neosnippet.vim'
    " Remove snippet markers after save
    autocmd! BufWrite * NeoSnippetClearMarkers
    " Plugin key-mappings
    imap <C-j>     <Plug>(neosnippet_expand_or_jump)
    smap <C-j>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-j>     <Plug>(neosnippet_expand_target)
" }}}

" Text Objects {{{
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'               " al | il
Plug 'kana/vim-textobj-syntax'             " ay | iy
Plug 'kana/vim-textobj-indent'             " ai | ii
Plug 'kana/vim-textobj-lastpat'            " a/ | i/
Plug 'nelstrom/vim-textobj-rubyblock'      " ar | ir
Plug 'osyo-manga/vim-textobj-multiblock'   " ab | ib
Plug 'idbrii/textobj-word-column.vim'      " ac | ic
Plug 'Julian/vim-textobj-variable-segment' " av | iv
Plug 'bootleq/vim-textobj-rubysymbol'
" }}}

" HTML/XML {{{
Plug 'othree/html5.vim'
Plug 'gregsexton/MatchTag'
Plug 'mattn/emmet-vim'
    " enable emment functions in insert mode
    let g:user_emmet_mode = 'i'
" }}}

" Template Engines {{{
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'slim-template/vim-slim', { 'for': 'slim' }
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'mustache/vim-mustache-handlebars', { 'for': 'html.handlebars' }
Plug 'honza/dockerfile.vim'
" }}}

" CSS {{{
Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'scss', 'less'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'scss', 'less'] }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'wavded/vim-stylus', { 'for': 'styl' }
" }}}

" JavaScript {{{
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
" Plug 'moll/vim-node'
Plug 'othree/yajs.vim'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'othree/javascript-libraries-syntax.vim'
    let g:used_javascript_libs =
        \ 'jquery,underscore,angularjs,angularui,jasmine'
Plug 'mxw/vim-jsx'
  let g:jsx_ext_required = 0
Plug 'geekjuice/vim-mocha', { 'for': 'javascript' }
  let g:mocha_js_command = "!mocha --compilers .:babel-core/register test/unit/setup.js {spec}"
" }}}

" PHP/Laravel {{{
Plug 'StanAngeloff/php.vim', { 'for': 'php' }
Plug 'xsbeats/vim-blade', { 'for': 'blade' }
" Plug 'adoy/vim-php-refactoring-toolbox'
" }}}

" Ruby/Rails {{{
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'tpope/vim-endwise', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
" Plug 'tpope/vim-rake', { 'for': 'ruby' }
" Plug 'tpope/vim-rbenv', { 'for': 'ruby' }
Plug 'Keithbsmiley/rspec.vim', { 'for': 'ruby' }
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }
    let g:rspec_command = "!bundle exec rspec {spec}"
    " if filereadable("../docker-compose.yml")
    "   let g:rspec_command = "!docker-compose run xlym bundle exec rspec {spec}"
    " endif
Plug 'ecomba/vim-ruby-refactoring', { 'for': 'ruby' }
Plug 'AndrewRadev/switch.vim', { 'for': ['ruby', 'eruby', 'coffee', 'haml'] }
" }}}

" Git {{{
Plug 'mhinz/vim-signify'
    let g:signify_vcs_list = ['git']
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
" Plug 'gregsexton/gitv', { 'on': 'Gitv' }
    nnoremap <leader>gv :GV<CR>
    nnoremap <leader>g4 :GV!<CR>
    nnoremap <leader>gc :Gcommit -v<CR>
    nnoremap <Leader>gs :Gstatus<CR>
    nnoremap <Leader>gd :Gdiff<CR>
    nnoremap <Leader>gb :Gblame<CR>
    nnoremap <Leader>gl :exe ':!cd ' . expand('%:p:h') . '; git lg'<CR>
    nnoremap <Leader>gr :Gread<CR>
    nnoremap <Leader>gw :Gwrite<CR>
    nnoremap <Leader>gp :Git push<CR>
    nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
    nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
" }}}

" Markdown {{{
Plug 'plasticboy/vim-markdown'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
  let g:limelight_paragraph_span = 1
  let g:limelight_priority = -1

function! s:goyo_enter()
  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
  endif
  " hi NonText ctermfg=101
  Limelight
endfunction

function! s:goyo_leave()
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
  endif
  Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
nnoremap <Leader>md :Goyo<CR>
" }}}


call plug#end()
